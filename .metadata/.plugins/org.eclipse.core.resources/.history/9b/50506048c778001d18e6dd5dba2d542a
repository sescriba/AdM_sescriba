.syntax unified
.thumb
.text

@ Simbolos exportados
.global asm_svc
.global asm_sum
.global asm_zeros           @ Agregar esto luego de .global asm_sum.
.global asm_escalar32
.global asm_escalar16


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
        bx lr


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   uint32_t asmSum (uint32_t firstOperand, uint32_t secondOperand)
@
@ Parametros recibidos:
@   r0: firstOperand
@   r1: secondOperand
@
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
                    @ es la direccion, en el codigo del programa, de la
                    @ instruccion "bl asm_sum" usada para saltar a
                    @ esta funcion, entonces "lr" contiene ese "pc" + 4).
                    @ el valor de retorno debe quedar en el registro r0.
                    @ En este caso, r0 es el resultado de r0 + r1.

        @ Otras alternativas para el retorno
        @ mov pc,lr
        @ bx lr
        @ push {lr} ... pop {pc}



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_zeros (uint32_t * vector, uint32_t longitud)
@
@ Parametros recibidos:
@   r0: dirección de memoria de inicio del vector
@   r1: longitud
.thumb_func               @ Se avisa al emsablador que esta es una funcion
    asm_zeros:            @ Etiqueta/nombre de la función.
        mov r2, 0         @ r2 = 0
        asm_zeros_bucle:  @ Etiqueta de comienzo de bucle.
	    str r2, [r0]          @ Asigna 0 a la palabra en dirección r0.
	    add r0, 4             @ Pasa a la siguiente palabra/elemento en vector.
	    subs r1, 1            @ Resta 1 a la cantidad de elementos y actualiza flags de estado del procesador. En particular, estamos interesados en el flag Z.
	    bne asm_zeros_bucle   @ La instrucción se ejecuta mientras el resultado de r1 - 1 no sea cero (Z == 0).
	    bx lr                 @ La instrucción de salto no se ejecutó porque Z == 1, volvemos a quién nos llamó.

    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void productoEscalar32 (uint32_t * vectorIn, uint32_t * vectorOut, uint32_t longitud, uint32_t escalar)
@
@ Parametros recibidos:
@   r0: dirección de memoria de inicio del vector IN
@   r1: dirección de memoria de inicio del vector OUT
@   r2: longitud
@   r3: escalar
.thumb_func               @ Se avisa al emsablador que esta es una funcion
    asm_escalar32:            @ Etiqueta/nombre de la función.
        push {r4}			  @ salvar el contexto de r4 en el stack
        asm_escalar32_bucle:  @ Etiqueta de comienzo de bucle.
        ldr r4, [r0]		  @ Guarda elemento del venctor IN en r4
        muls r4, r3, r4		  @ Multiplica r4*r3 donde r3 es el escalar
	    str r4, [r1]          @ Asigna r4 a la palabra en dirección r1 (vector OUT).
	    add r0, 4             @ Pasa a la siguiente palabra/elemento en vector IN.
	    add r1, 4			  @ Pasa a la siguiente palabra/elemento en vector OUT.
	    subs r2, 1            @ Resta 1 a la cantidad de elementos y actualiza flags de estado del procesador. En particular, estamos interesados en el flag Z.
	    bne asm_escalar32_bucle@ La instrucción se ejecuta mientras el resultado de r1 - 1 no sea cero (Z == 0).
	  	pop {r4}			  @ recuperar r4 del stack
	    bx lr                 @ La instrucción de salto no se ejecutó porque Z == 1, volvemos a quién nos llamó.

    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void productoEscalar16 (uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitud, uint32_t escalar)
@
@ Parametros recibidos:
@   r0: dirección de memoria de inicio del vector IN
@   r1: dirección de memoria de inicio del vector OUT
@   r2: longitud
@   r3: escalar
.thumb_func               @ Se avisa al emsablador que esta es una funcion
    asm_escalar16:            @ Etiqueta/nombre de la función.
        push {r4}			  @ salvar el contexto de r4 en el stack
        asm_escalar16_bucle:  @ Etiqueta de comienzo de bucle.
        ldrh r4, [r0]		  @ Guarda elemento del venctor IN en r4
        muls r4, r3, r4		  @ Multiplica r4*r3 donde r3 es el escalar
	    strh r4, [r1]          @ Asigna r4 a la palabra en dirección r1 (vector OUT).
	    add r0, 4             @ Pasa a la siguiente palabra/elemento en vector IN.
	    add r1, 4			  @ Pasa a la siguiente palabra/elemento en vector OUT.
	    subs r2, 1            @ Resta 1 a la cantidad de elementos y actualiza flags de estado del procesador. En particular, estamos interesados en el flag Z.
	    bne asm_escalar16_bucle@ La instrucción se ejecuta mientras el resultado de r1 - 1 no sea cero (Z == 0).
	  	pop {r4}			  @ recuperar r4 del stack
	    bx lr                 @ La instrucción de salto no se ejecutó porque Z == 1, volvemos a quién nos llamó.

    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void productoEscalar12 (uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitud, uint32_t escalar)
@
@ Parametros recibidos:
@   r0: dirección de memoria de inicio del vector IN
@   r1: dirección de memoria de inicio del vector OUT
@   r2: longitud
@   r3: escalar
.thumb_func               @ Se avisa al emsablador que esta es una funcion
    asm_escalar12:            @ Etiqueta/nombre de la función.
        push {r4,r5}			  @ salvar el contexto de r4 en el stack
        mov r5, #4095
        asm_escalar12_bucle:  @ Etiqueta de comienzo de bucle.
        ldrh r4, [r0]		  @ Guarda elemento del venctor IN en r4
        muls r4, r3, r4		  @ Multiplica r4*r3 donde r3 es el escalar
        usat r4, 12, r4		  @ check si saturo a 12 bits
	    strh r4, [r1]         @ Asigna r4 a la palabra en dirección r1 (vector OUT).
	    add r0, 4             @ Pasa a la siguiente palabra/elemento en vector IN.
	    add r1, 4			  @ Pasa a la siguiente palabra/elemento en vector OUT.
	    subs r2, 1            @ Resta 1 a la cantidad de elementos y actualiza flags de estado del procesador. En particular, estamos interesados en el flag Z.
	    bne asm_escalar12_bucle@ La instrucción se ejecuta mientras el resultado de r1 - 1 no sea cero (Z == 0).
	  	pop {r4}			  @ recuperar r4 del stack
	    bx lr                 @ La instrucción de salto no se ejecutó porque Z == 1, volvemos a quién nos llamó.


    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void filtroVentana10 (uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitud)
@
@ Parametros recibidos:
@   r0: dirección de memoria de inicio del vector IN
@   r1: dirección de memoria de inicio del vector OUT
@   r2: longitud
.thumb_func               @ Se avisa al emsablador que esta es una funcion
    filtroVentana10:            @ Etiqueta/nombre de la función.
        push {r3-r8}			  @ salvar el contexto de r4 en el stack
        mov r3, r0
        lsl r4, r2, 2
        filtroVentana10_bucle:  @ Etiqueta de comienzo de bucle.
	        mov r5, #10
	        	bucle2:
		        adds r6, r3, r5
		        subs r6,r4,r6
		      	ldr r6, [r0]
		        it pl
		        addpl r7, r6

		        subs r6, r3, r5
		        subs r6, r3, r6
		        ldr r6, [r0]
		        it pl
		        addpl r7,r6
	        subs r5,1
	        bne bucle2
	    mov r8, #10
	    udiv r7,r7,r8
	    strh r7, [r1]
	    add r0, 2             @ Pasa a la siguiente palabra/elemento en vector IN.
	    add r1, 2			  @ Pasa a la siguiente palabra/elemento en vector OUT.
	    subs r2, 1            @ Resta 1 a la cantidad de elementos y actualiza flags de estado del procesador. En particular, estamos interesados en el flag Z.
	    bne filtroVentana10_bucle@ La instrucción se ejecuta mientras el resultado de r1 - 1 no sea cero (Z == 0).
	  	pop {r3-r8}			  @ recuperar r4 del stack
	    bx lr                 @ La instrucción de salto no se ejecutó porque Z == 1, volvemos a quién nos llamó.


    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void pack32to16 (int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud)
@
@ Parametros recibidos:
@   r0: dirección de memoria de inicio del vector IN
@   r1: dirección de memoria de inicio del vector OUT
@   r2: longitud
.thumb_func               @ Se avisa al emsablador que esta es una funcion
    asm_pack16:            @ Etiqueta/nombre de la función.
        push {r4-r5}			  @ salvar el contexto de r4 en el stack
        asm_pack16_bucle:  @ Etiqueta de comienzo de bucle.
        ldr r4, [r0]		  @ Guarda elemento del venctor IN en r4
        lsr r4, 4		  	  @ desplazo 4 a la derecha (parte alta)
        mov r5,#0xffff
        and r5,r4,r5		  @ hago and
	    strh r5, [r1]         @ Asigna r5 a la palabra en dirección r1 (vector OUT).
	    add r0, 4             @ Pasa a la siguiente palabra/elemento en vector IN.
	    add r1, 4			  @ Pasa a la siguiente palabra/elemento en vector OUT.
	    subs r2, 1            @ Resta 1 a la cantidad de elementos y actualiza flags de estado del procesador. En particular, estamos interesados en el flag Z.
	    bne asm_pack16_bucle@ La instrucción se ejecuta mientras el resultado de r1 - 1 no sea cero (Z == 0).
	  	pop {r4-r5}			  @ recuperar r4 del stack
	    bx lr                 @ La instrucción de salto no se ejecutó porque Z == 1, volvemos a quién nos llamó.

    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   int32_t max (int32_t * vectorIn, uint32_t longitud)
@
@ Parametros recibidos:
@   r0: dirección de memoria de inicio del vector IN
@   r1: longitud
.thumb_func               @ Se avisa al emsablador que esta es una funcion
    asm_max:            @ Etiqueta/nombre de la función.
        push {r4-r7}			  @ salvar el contexto de r4 en el stack
        mov r5, #0
        mov r7, r1
        asm_max_bucle:  @ Etiqueta de comienzo de bucle.
        ldr r4, [r0]		  @ Guarda elemento del venctor IN en r4
        subs r5, r4
		ITT MI
		movmi r5, r4
		subsmi r6, r1, r7

	    add r0, 4             @ Pasa a la siguiente palabra/elemento en vector IN.
	    subs r1, 1            @ Resta 1 a la cantidad de elementos y actualiza flags de estado del procesador. En particular, estamos interesados en el flag Z.
	    bne asm_max_bucle@ La instrucción se ejecuta mientras el resultado de r1 - 1 no sea cero (Z == 0).
	  	mov r0, r6
	  	pop {r4-r7}			  @ recuperar r4 del stack
	    bx lr                 @ La instrucción de salto no se ejecutó porque Z == 1, volvemos a quién nos llamó.

    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void downsampleM (int32_t * vectorIn, int32_t * vectorOut, uint32_t longitud, uint32_t N)
@
@ Parametros recibidos:
@   r0: dirección de memoria de inicio del vector IN
@   r1: dirección de memoria de inicio del vector OUT
@   r2: longitud
@	r3: N
.thumb_func               @ Se avisa al emsablador que esta es una funcion
    asm_downsampleM:            @ Etiqueta/nombre de la función.
        push {r4-r6}			  @ salvar el contexto de r4 en el stack
        mov r5, #0
        mov r6, #10
        asm_downsampleM_bucle:  @ Etiqueta de comienzo de bucle.
        ldr r4, [r0]		  @ Guarda elemento del venctor IN en r4
        sdiv r4,r6
        adds r5, 1
        udiv r5, r3
        subs r5, #1
		IT NE
		strne r4, [r1]

	    add r0, 4             @ Pasa a la siguiente palabra/elemento en vector IN.
	    add r1, 4			  @ Pasa a la siguiente palabra/elemento en vector OUT.
	    subs r1, 1            @ Resta 1 a la cantidad de elementos y actualiza flags de estado del procesador. En particular, estamos interesados en el flag Z.
	    bne asm_downsampleM_bucle@ La instrucción se ejecuta mientras el resultado de r1 - 1 no sea cero (Z == 0).
	  	pop {r4-r6}			  @ recuperar r4 del stack
	    bx lr                 @ La instrucción de salto no se ejecutó porque Z == 1, volvemos a quién nos llamó.


    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void invertir (uint16_t * vector, uint32_t longitud)
@
@ Parametros recibidos:
@   r0: dirección de memoria de inicio del vector
@   r1: longitud
.thumb_func               @ Se avisa al emsablador que esta es una funcion
    asm_invertir:            @ Etiqueta/nombre de la función.
        mov r2, #0x20000FFF
        mov r3, r1
        asm_invertir_bucle:  @ Etiqueta de comienzo de bucle.
        ldrh r4, [r0]		  @ Guarda elemento del venctor IN en r4
        strh r4, [r2]
	    add r0, 4             @ Pasa a la siguiente palabra/elemento en vector IN.
	    sub r2, 4			  @ Pasa a la siguiente palabra/elemento en vector OUT.
	    subs r1, 1            @ Resta 1 a la cantidad de elementos y actualiza flags de estado del procesador. En particular, estamos interesados en el flag Z.
	    bne asm_invertir_bucle@ La instrucción se ejecuta mientras el resultado de r1 - 1 no sea cero (Z == 0).
	    asm_invertir_bucle2:
	    ldrh r4, [r2]		  @ Guarda elemento del venctor IN en r4
        strh r4, [r0]
        add r0, 4             @ Pasa a la siguiente palabra/elemento en vector IN.
	    add r2, 4			  @ Pasa a la siguiente palabra/elemento en vector OUT.
        subs r1, 1            @ Resta 1 a la cantidad de elementos y actualiza flags de estado del procesador. En particular, estamos interesados en el flag Z.
	    bne asm_invertir_bucle@ La instrucción se ejecuta mientras el resultado de r1 - 1 no sea cero (Z == 0).
	    bx lr                 @ La instrucción de salto no se ejecutó porque Z == 1, volvemos a quién nos llamó.
